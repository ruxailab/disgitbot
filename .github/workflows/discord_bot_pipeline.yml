name: Discord Bot Data Pipeline

on:
  schedule:
    - cron: '0 0 * * *'  # Run daily at midnight UTC
  workflow_dispatch: {}  # Allow manual trigger
  push:
    branches:
      - post_visualization_refactor

jobs:
  # Discord Bot Data Pipeline - Individual stages for better visibility
  discord-bot-pipeline:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python 3.13.2
        uses: actions/setup-python@v4
        with:
          python-version: '3.13.2'

      - name: Cache pip dependencies and built wheels
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pip
            ~/.local/lib/python3.13/site-packages
            /tmp/pip-build-*
            /tmp/pip-install-*
          key: ${{ runner.os }}-pip-py313-${{ hashFiles('discord_bot/config/discord_bot_requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-py313-
            ${{ runner.os }}-pip-

      - name: Cache build dependencies  
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/matplotlib
            ~/.cache/numpy
            /tmp/build-env-*
          key: ${{ runner.os }}-build-py313-${{ hashFiles('discord_bot/config/discord_bot_requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-build-py313-
            ${{ runner.os }}-build-

      - name: Cache system packages
        uses: actions/cache@v3
        with:
          path: /var/cache/apt
          key: ${{ runner.os }}-apt-${{ github.run_id }}
          restore-keys: |
            ${{ runner.os }}-apt-

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libffi-dev libnacl-dev python3-dev

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          # Install build dependencies for faster compilation
          pip install --user --cache-dir ~/.cache/pip build numpy setuptools-scm
          # Set parallel build jobs for faster compilation
          export NPY_NUM_BUILD_JOBS=4
          export MAKEFLAGS="-j4"
          # Try binary wheels first, fallback to building with optimizations
          pip install --user --cache-dir ~/.cache/pip --only-binary=all -r discord_bot/config/discord_bot_requirements.txt || \
          pip install --user --cache-dir ~/.cache/pip --prefer-binary -r discord_bot/config/discord_bot_requirements.txt

      - name: Set up Google Credentials
        run: echo "${{ secrets.GOOGLE_CREDENTIALS_JSON }}" | base64 --decode > discord_bot/config/credentials.json

      - name: Stage 1 - Data Collection
        env:
          DISCORD_BOT_TOKEN: ${{ secrets.DISCORD_BOT_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          REPO_OWNER: ${{ secrets.REPO_OWNER }}
          GOOGLE_APPLICATION_CREDENTIALS: discord_bot/config/credentials.json
        run: |
          cd discord_bot
          python -c "
          import sys, os, asyncio
          sys.path.insert(0, 'src')
          from pipeline.stage_runners import run_data_collection_stage
          success = asyncio.run(run_data_collection_stage())
          sys.exit(0 if success else 1)
          "

      - name: Stage 2 - Data Processing
        env:
          DISCORD_BOT_TOKEN: ${{ secrets.DISCORD_BOT_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          REPO_OWNER: ${{ secrets.REPO_OWNER }}
          GOOGLE_APPLICATION_CREDENTIALS: discord_bot/config/credentials.json
        run: |
          cd discord_bot
          python -c "
          import sys, os, asyncio
          sys.path.insert(0, 'src')
          from pipeline.stage_runners import run_data_processing_stage
          success = asyncio.run(run_data_processing_stage())
          sys.exit(0 if success else 1)
          "

      - name: Stage 3 - Data Storage
        env:
          DISCORD_BOT_TOKEN: ${{ secrets.DISCORD_BOT_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          REPO_OWNER: ${{ secrets.REPO_OWNER }}
          GOOGLE_APPLICATION_CREDENTIALS: discord_bot/config/credentials.json
        run: |
          cd discord_bot
          python -c "
          import sys, os, asyncio
          sys.path.insert(0, 'src')
          from pipeline.stage_runners import run_data_storage_stage
          success = asyncio.run(run_data_storage_stage())
          sys.exit(0 if success else 1)
          "

      - name: Stage 4 - Discord Updates
        env:
          DISCORD_BOT_TOKEN: ${{ secrets.DISCORD_BOT_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          REPO_OWNER: ${{ secrets.REPO_OWNER }}
          GOOGLE_APPLICATION_CREDENTIALS: discord_bot/config/credentials.json
        run: |
          cd discord_bot
          python -c "
          import sys, os, asyncio
          sys.path.insert(0, 'src')
          from pipeline.stage_runners import run_discord_update_stage
          success = asyncio.run(run_discord_update_stage())
          sys.exit(0 if success else 1)
          "

      - name: Pipeline Summary
        if: always()
        run: |
          cd discord_bot
          if [ -f pipeline_context.json ]; then
            echo "Pipeline execution completed!"
            echo "Final context summary:"
            python -c "
            import json
            try:
                with open('pipeline_context.json', 'r') as f:
                    context = json.load(f)
                print(f'- Contributors processed: {len(context.get(\"contributions\", {}))}')
                print(f'- Repository metrics: {bool(context.get(\"repo_metrics\"))}')
                print(f'- Hall of fame data: {bool(context.get(\"hall_of_fame\"))}')
                print(f'- Analytics data: {bool(context.get(\"analytics_data\"))}')
            except Exception as e:
                print(f'Could not read pipeline context: {e}')
            "
          else
            echo "No pipeline context found - pipeline may have failed early"
          fi
