name: Discord Bot Data Pipeline

on:
  schedule:
    - cron: '0 0 * * *'  # Run daily at midnight UTC
  workflow_dispatch: {}  # Allow manual trigger
  push:
    branches:
      - post_visualization_refactor

jobs:
  # Discord Bot Data Pipeline - Individual stages for better visibility
  discord-bot-pipeline:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python 3.13.2
        uses: actions/setup-python@v4
        with:
          python-version: '3.13.2'

      - name: Cache pip and build artifacts
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pip
            ~/.cache/pip-tools
            ~/.local/lib/python3.13/site-packages
            ~/.local/bin
            /tmp/pip-*
            /opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages
          key: ${{ runner.os }}-pip-py313-${{ hashFiles('discord_bot/config/discord_bot_requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-py313-

      - name: Cache compiled packages and wheels
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/matplotlib
            ~/.cache/numpy
            ~/.cache/pip/wheels
            ~/.local/lib/python3.13/site-packages/matplotlib*
            ~/.local/lib/python3.13/site-packages/numpy*
            ~/.local/lib/python3.13/site-packages/discord*
          key: ${{ runner.os }}-compiled-py313-${{ hashFiles('discord_bot/config/discord_bot_requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-compiled-py313-

      - name: Cache system build tools
        uses: actions/cache@v3
        with:
          path: |
            /var/cache/apt
            /usr/lib/x86_64-linux-gnu
            /usr/include
          key: ${{ runner.os }}-system-${{ github.run_id }}
          restore-keys: |
            ${{ runner.os }}-system-

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libffi-dev libnacl-dev python3-dev build-essential

      - name: Install dependencies with aggressive caching
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install --user --cache-dir ~/.cache/pip --find-links ~/.cache/pip/wheels build numpy setuptools-scm
          
          export NPY_NUM_BUILD_JOBS=4
          export MAKEFLAGS="-j4"
          export PIP_CACHE_DIR=~/.cache/pip
          export PIP_FIND_LINKS=~/.cache/pip/wheels
          
          pip install --user --cache-dir ~/.cache/pip --find-links ~/.cache/pip/wheels --only-binary=:all: -r discord_bot/config/discord_bot_requirements.txt || \
          pip install --user --cache-dir ~/.cache/pip --find-links ~/.cache/pip/wheels --prefer-binary -r discord_bot/config/discord_bot_requirements.txt || \
          pip install --user --cache-dir ~/.cache/pip -r discord_bot/config/discord_bot_requirements.txt

      - name: Set up Google Credentials
        run: echo "${{ secrets.GOOGLE_CREDENTIALS_JSON }}" | base64 --decode > discord_bot/config/credentials.json

      - name: Stage 1 - Data Collection
        env:
          DISCORD_BOT_TOKEN: ${{ secrets.DISCORD_BOT_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          REPO_OWNER: ${{ secrets.REPO_OWNER }}
          GOOGLE_APPLICATION_CREDENTIALS: discord_bot/config/credentials.json
        run: |
          cd discord_bot
          python -c "
          import sys, os, asyncio
          sys.path.insert(0, 'src')
          from pipeline.stage_runners import run_data_collection_stage
          success = asyncio.run(run_data_collection_stage())
          sys.exit(0 if success else 1)
          "

      - name: Stage 2 - Data Processing
        env:
          DISCORD_BOT_TOKEN: ${{ secrets.DISCORD_BOT_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          REPO_OWNER: ${{ secrets.REPO_OWNER }}
          GOOGLE_APPLICATION_CREDENTIALS: discord_bot/config/credentials.json
        run: |
          cd discord_bot
          python -c "
          import sys, os, asyncio
          sys.path.insert(0, 'src')
          from pipeline.stage_runners import run_data_processing_stage
          success = asyncio.run(run_data_processing_stage())
          sys.exit(0 if success else 1)
          "

      - name: Stage 3 - Data Storage
        env:
          DISCORD_BOT_TOKEN: ${{ secrets.DISCORD_BOT_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          REPO_OWNER: ${{ secrets.REPO_OWNER }}
          GOOGLE_APPLICATION_CREDENTIALS: discord_bot/config/credentials.json
        run: |
          cd discord_bot
          python -c "
          import sys, os, asyncio
          sys.path.insert(0, 'src')
          from pipeline.stage_runners import run_data_storage_stage
          success = asyncio.run(run_data_storage_stage())
          sys.exit(0 if success else 1)
          "

      - name: Stage 4 - Discord Updates
        env:
          DISCORD_BOT_TOKEN: ${{ secrets.DISCORD_BOT_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          REPO_OWNER: ${{ secrets.REPO_OWNER }}
          GOOGLE_APPLICATION_CREDENTIALS: discord_bot/config/credentials.json
        run: |
          cd discord_bot
          python -c "
          import sys, os, asyncio
          sys.path.insert(0, 'src')
          from pipeline.stage_runners import run_discord_update_stage
          success = asyncio.run(run_discord_update_stage())
          sys.exit(0 if success else 1)
          "

      - name: Pipeline Summary
        if: always()
        run: |
          cd discord_bot
          if [ -f pipeline_context.json ]; then
            echo "Pipeline execution completed!"
            echo "Final context summary:"
            echo "- Pipeline context file size: $(wc -c < pipeline_context.json) bytes"
            echo "- Data collection completed: $(grep -q 'contributions' pipeline_context.json && echo 'Yes' || echo 'No')"
            echo "- Analytics generated: $(grep -q 'analytics_data' pipeline_context.json && echo 'Yes' || echo 'No')"
          else
            echo "No pipeline context found - pipeline may have failed early"
          fi
