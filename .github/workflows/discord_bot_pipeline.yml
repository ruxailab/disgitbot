name: Discord Bot Data Pipeline

on:
  schedule:
    - cron: '0 0 * * *'  # Run daily at midnight UTC
  workflow_dispatch: {}  # Allow manual trigger
  push:
    branches:
      - post_visualization_refactor

jobs:
  discord-bot-pipeline:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.13
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
          cache: 'pip'
          cache-dependency-path: 'discord_bot/config/discord_bot_requirements.txt'

      - name: Cache system dependencies
        uses: actions/cache@v4
        id: system-deps
        with:
          path: /var/cache/apt/archives
          key: system-deps-${{ runner.os }}-${{ hashFiles('.github/workflows/discord_bot_pipeline.yml') }}

      - name: Install system dependencies
        if: steps.system-deps.outputs.cache-hit != 'true'
        run: |
          sudo apt-get update
          sudo apt-get install -y libffi-dev libnacl-dev python3-dev build-essential

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip wheel setuptools
          pip install -r discord_bot/config/discord_bot_requirements.txt

      - name: Set up Google Credentials
        run: echo "${{ secrets.DEV_GOOGLE_CREDENTIALS_JSON }}" | base64 --decode > discord_bot/config/credentials.json

      - name: Stage 1 - Data Collection
        env:
          DISCORD_BOT_TOKEN: ${{ secrets.DISCORD_BOT_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          REPO_OWNER: ${{ secrets.REPO_OWNER }}
          GOOGLE_APPLICATION_CREDENTIALS: discord_bot/config/credentials.json
        run: |
          cd discord_bot
          python -c "
          import sys, os, asyncio
          sys.path.insert(0, 'src')
          from pipeline.stage_runners import run_data_collection_stage
          success = asyncio.run(run_data_collection_stage())
          sys.exit(0 if success else 1)
          "

      - name: Stage 2 - Data Processing
        env:
          DISCORD_BOT_TOKEN: ${{ secrets.DISCORD_BOT_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          REPO_OWNER: ${{ secrets.REPO_OWNER }}
          GOOGLE_APPLICATION_CREDENTIALS: discord_bot/config/credentials.json
        run: |
          cd discord_bot
          python -c "
          import sys, os, asyncio
          sys.path.insert(0, 'src')
          from pipeline.stage_runners import run_data_processing_stage
          success = asyncio.run(run_data_processing_stage())
          sys.exit(0 if success else 1)
          "

      - name: Stage 3 - Data Storage
        env:
          DISCORD_BOT_TOKEN: ${{ secrets.DISCORD_BOT_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          REPO_OWNER: ${{ secrets.REPO_OWNER }}
          GOOGLE_APPLICATION_CREDENTIALS: discord_bot/config/credentials.json
        run: |
          cd discord_bot
          python -c "
          import sys, os, asyncio
          sys.path.insert(0, 'src')
          from pipeline.stage_runners import run_data_storage_stage
          success = asyncio.run(run_data_storage_stage())
          sys.exit(0 if success else 1)
          "

      - name: Stage 4 - Discord Updates
        env:
          DISCORD_BOT_TOKEN: ${{ secrets.DISCORD_BOT_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          REPO_OWNER: ${{ secrets.REPO_OWNER }}
          GOOGLE_APPLICATION_CREDENTIALS: discord_bot/config/credentials.json
        run: |
          cd discord_bot
          python -c "
          import sys, os, asyncio
          sys.path.insert(0, 'src')
          from pipeline.stage_runners import run_discord_update_stage
          success = asyncio.run(run_discord_update_stage())
          sys.exit(0 if success else 1)
          "

      - name: Pipeline Summary
        if: always()
        run: |
          cd discord_bot
          if [ -f pipeline_context.json ]; then
            echo "Pipeline execution completed!"
            echo "Final context summary:"
            echo "- Pipeline context file size: $(wc -c < pipeline_context.json) bytes"
            echo "- Data collection completed: $(grep -q 'contributions' pipeline_context.json && echo 'Yes' || echo 'No')"
            echo "- Analytics generated: $(grep -q 'analytics_data' pipeline_context.json && echo 'Yes' || echo 'No')"
          else
            echo "No pipeline context found - pipeline may have failed early"
          fi
